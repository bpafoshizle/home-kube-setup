##################### Individual Configs ##################
###########################################################
- name: apply bletchley001 individual configs
  hosts: bletchley001
  remote_user: ubuntu
  tasks:
    - name: import bletchley001 tasks
      import_tasks: bletchley001.yml

- name: apply bletchley002 individual configs
  hosts: bletchley002
  remote_user: ubuntu
  tasks:
    - name: import bletchley002 tasks
      import_tasks: bletchley002.yml

- name: apply bletchley003 individual configs
  hosts: bletchley003
  remote_user: ubuntu
  tasks:
    - name: import bletchley003 tasks
      import_tasks: bletchley003.yml

- name: apply bletchley004 individual configs
  hosts: bletchley004
  remote_user: ubuntu
  tasks:
    - name: import bletchley004 tasks
      import_tasks: bletchley004.yml

- name: apply bletchley005 individual configs
  hosts: bletchley005
  remote_user: ubuntu
  tasks:
    - name: import bletchley005 tasks
      import_tasks: bletchley005.yml


##################### Common Config #######################
###########################################################
- name: apply common config to all hosts
  hosts: all
  remote_user: ubuntu
  
  tasks:
    - name: generate ssh identity public and private keys
      script: ./setup-scripts/00-ssh-ident-setup.sh
      args:
        creates: /home/ubuntu/.ssh/id_rsa

    - name: update vimrc and color scheme
      script: ./setup-scripts/00-vim-setup.sh
    
    - name: install docker.io 
      become: true
      apt: 
        name: docker.io
        update_cache: yes
        state: latest
    
    - name: copy docker daemon.json with owner and permissions
      become: true
      copy:
        src: ./config-files/etc/docker/daemon.json
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      tags:
        - docker-daemon-json

    - name: check cgroups and swap options for kernel command line file
      become: true
      command: grep -F "cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swapaccount=1" /boot/firmware/cmdline.txt 
      register: cgroupswapoptions
      check_mode: no
      ignore_errors: yes
      changed_when: no
    
    - name: report if cgroup and swap options present
      debug: msg="cgroups and swap options present"
      when: cgroupswapoptions.rc == 0
    
    - name: append the cgroups and swap options to the kernel command line
      become: true
      script: ./setup-scripts/00-cgroup-and-swap.sh
      when: cgroupswapoptions.rc != 0
    
    # Idempotent way to build a /etc/hosts file with Ansible using your Ansible hosts inventory for a source.
    # Will include all hosts the playbook is run on.
    - name: build hosts file
      become: true
      lineinfile: 
        path: /etc/hosts 
        regexp: '.*{{ item }}$' 
        line: "{{ hostvars[item].ansible_default_ipv4.address }} {{item}}" 
        state: present
      with_items: "{{ groups['all'] }}"
      when: hostvars[item].ansible_default_ipv4.address is defined

    # Kubernetes needs the br_netfilter and overlay modules added to /etc/modules-load.d and loaded.
    - name: copy the k8s.conf file to /etc/modules-load.d
      become: true
      copy:
        src: ./config-files/etc/modules-load.d/k8s.conf
        dest: /etc/modules-load.d/k8s.conf
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      tags:
        - copy-config-modules-load
      
    - name: load the br_netfilter and overlay modules
      become: true
      shell: 'modprobe br_netfilter && modprobe overlay'
      tags:
        - load-modules
    
    # Kubernetes needs iptables to be configured to see bridged network traffic
    - name: configure iptables to see bridged network traffic
      become: true
      copy:
        src: ./config-files/etc/sysctl.d/k8s.conf
        dest: /etc/sysctl.d/k8s.conf
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      tags:
        - copy-config-sysctl-d
    
    - name: reload system sysctl.d to pick up iptables changes
      become: true
      command: sysctl --system
      tags:
        - reload-sysctl-d
    
    # Add kubernetes repo, install components, and disable apt-updates for those
    - name: add the packages.cloud.google.com atp key
      become: true
      shell: 'curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -'

    - name: add the kubernetes repo to ubuntu sources
      become: true
      copy:
        src: ./config-files/etc/apt/sources.list.d/kubernetes.list
        dest: /etc/apt/sources.list.d/kubernetes.list
        owner: root
        group: root
        mode: u=rw,g=r,o=r

    - name: install kubelet, kubeadm, and kubectl
      become: true
      apt:
        pkg:
        - kubelet
        - kubeadm
        - kubectl
        update_cache: yes
        state: latest
    
    - name: prevent kubelet, kubeadm, and kubectl from being updated
      become: true
      command: apt-mark hold kubelet kubeadm kubectl
      

##################### Kube Control Plane Node Configs ##################
########################################################################
- name: setup control plane node
  hosts: kubecontrol
  remote_user: ubuntu
  tasks:
    - name: generate a bootstrap token to authenticate nodes being joined to the cluster
      shell: kubeadm token generate
      register: kube_token 
    
    - name: print token
      debug:
        msg: "kube_token: {{ kube_token.stdout }}"
    
    - name: initialize control plane
      become: true
      shell: "kubeadm init --token='{{ kube_token.stdout }}' --kubernetes-version='{{ kubeversion }}' --pod-network-cidr=10.244.0.0/16"
      args:
        creates: /etc/kubernetes/admin.conf 
      register: kube_init_output
      tags: 
        - init
    
    - name: write kube init output to a file on control plane node
      copy:
        content: "{{ kube_init_output.stdout }}"
        dest: "/home/ubuntu/kube-init-output-{{ ansible_date_time.iso8601_basic }}"
    
    - name: Ensures /home/ubuntu/.kube dir exists
      file: 
        path: /home/ubuntu/.kube
        state: directory

    - name: copy admin kube config file to ubuntu user
      become: true
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: u=rw,g=r,o=r

    - name: download kubeconfig to ansible control host
      become: true
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: /Users/bpafoshizle/.kube/bletchley-config
        flat: yes
      tags: 
        - copy-kube-config

    - name: download and apply the flannel yaml to the cluster
      shell: 'kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml'
      tags: 
        - flannel

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
      tags: 
        - generate-join

    #- name: copy join command to file on control node
    #  copy:
    #    content: "{{ join_command.stdout_lines[0] }}"
    #    dest: "/home/ubuntu/join-command-{{ ansible_date_time.iso8601_basic }}"
        
    #- name: copy join command to local file
    #  local_action: 
    #    module: ansible.builtin.copy
    #    content: "{{ join_command.stdout_lines[0] }}" 
    #    dest: "./sensitive/join-command-{{ ansible_date_time.iso8601_basic }}"

    
    - name: add join_command to dummy host for access in compute node play
      add_host:
        name: "variable_holder"
        shared_join_command:  "{{ join_command.stdout_lines[0] }}"
      tags:
        - generate-join

    # Idempotent method to add command option for enabling aggregate routing
    # to kube-apiserver. Necessary for API extensions like metrics-server
    - name: enable kube-apiserver aggregate routing
      become: true
      lineinfile: 
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
        regexp: '.*enable-aggregator-routing$' 
        insertafter: '.*- kube-apiserver$'
        line: "    - --enable-aggregator-routing=true" 
        state: present
      tags:
        - kube-apiserver-enable-aggregator  

################### Kube compute nodes setup ##########################
#######################################################################
- name: join compute nodes
  hosts: kubecompute
  remote_user: ubuntu
  vars: 
    join_command: "{{ hostvars['variable_holder']['shared_join_command'] }}"
  tasks:
    - name: run join command to join node to cluster
      become: true
      shell: "{{ join_command }}"
      tags:
        - join
 
